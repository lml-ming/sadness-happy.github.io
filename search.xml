<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascript</title>
    <url>/2020/11/23/javascript/</url>
    <content><![CDATA[<h2 id="1、实现一个call函数"><a href="#1、实现一个call函数" class="headerlink" title="1、实现一个call函数"></a><strong>1、实现一个call函数</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;not funciton&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...arg)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="2、实现一个apply函数"><a href="#2、实现一个apply函数" class="headerlink" title="2、实现一个apply函数"></a><strong>2、实现一个apply函数</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;not funciton&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="3、实现一个bind函数"><a href="#3、实现一个bind函数" class="headerlink" title="3、实现一个bind函数"></a><strong>3、实现一个bind函数</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：类似call，但返回的是函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理函数使用new的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...arg, ...arguments)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _this.apply(context, arg.concat(...arguments))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、instanceof的原理"><a href="#4、instanceof的原理" class="headerlink" title="4、instanceof的原理"></a><strong>4、instanceof的原理</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：右边变量的原型存在于左边变量的原型链上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftValue = left.__proto__</span><br><span class="line">  <span class="keyword">let</span> rightValue = right.prototype</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === rightValue) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftValue = leftValue.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、Object-create的基本实现原理"><a href="#5、Object-create的基本实现原理" class="headerlink" title="5、Object.create的基本实现原理"></a><strong>5、Object.create的基本实现原理</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：将传入的对象作为原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、new本质"><a href="#6、new本质" class="headerlink" title="6、new本质"></a><strong>6、new本质</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新对象且将其隐式原型指向构造函数原型</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      __proto__ : fun.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行构造函数</span></span><br><span class="line">    fun.call(obj, ...arguments)</span><br><span class="line">    <span class="comment">// 返回该对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = myNew(person)(<span class="string">&#x27;chen&#x27;</span>, <span class="number">18</span>) <span class="comment">// &#123;name: &quot;chen&quot;, age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="7、实现一个基本的Promise"><a href="#7、实现一个基本的Promise" class="headerlink" title="7、实现一个基本的Promise"></a><strong>7、实现一个基本的Promise</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未添加异步处理等其他边界情况</span></span><br><span class="line"><span class="comment">// ①自动执行函数，②三个状态，③then</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 三个状态</span></span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.value = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.reason = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自动执行函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// then</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;fulfilled&#x27;</span>:</span><br><span class="line">        onFulfilled()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rejected&#x27;</span>:</span><br><span class="line">        onRejected()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、实现浅拷贝"><a href="#8、实现浅拷贝" class="headerlink" title="8、实现浅拷贝"></a><strong>8、实现浅拷贝</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. ...实现</span></span><br><span class="line"><span class="keyword">let</span> copy1 = &#123;...&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copy2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="9、实现一个基本的深拷贝"><a href="#9、实现一个基本的深拷贝" class="headerlink" title="9、实现一个基本的深拷贝"></a><strong>9、实现一个基本的深拷贝</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. JOSN.stringify()/JSON.parse()</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">x</span>: <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 递归拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> copy = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">      copy[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">&#x27;object&#x27;</span> ? deepClone(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10、使用setTimeout模拟setInterval"><a href="#10、使用setTimeout模拟setInterval" class="headerlink" title="10、使用setTimeout模拟setInterval"></a><strong>10、使用setTimeout模拟setInterval</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span></span><br><span class="line"><span class="built_in">setTimeout</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="built_in">setTimeout</span> (<span class="built_in">arguments</span>.callee, <span class="number">500</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<p><strong>11、js实现一个继承方法// 借用构造函数继承实例属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借用构造函数继承实例属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生继承原型属性</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> Super = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Super.prototype = Parent.prototype</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Super()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="12、实现一个基本的Event-Bus"><a href="#12、实现一个基本的Event-Bus" class="headerlink" title="12、实现一个基本的Event Bus"></a><strong>12、实现一个基本的Event Bus</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件通信，一个触发与监听的过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 存储事件</span></span><br><span class="line">    <span class="built_in">this</span>.events = <span class="built_in">this</span>.events || <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  addListener (type, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.events.get(type)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.events.set(type, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emit (type) &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = <span class="built_in">this</span>.events.get(type)</span><br><span class="line">    handle.apply(<span class="built_in">this</span>, [...arguments].slice(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.addListener(<span class="string">&#x27;ages&#x27;</span>, <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">emitter.emit(<span class="string">&#x27;ages&#x27;</span>, <span class="number">18</span>)  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>

<h2 id="13、实现一个双向数据绑定"><a href="#13、实现一个双向数据绑定" class="headerlink" title="13、实现一个双向数据绑定"></a><strong>13、实现一个双向数据绑定</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"><span class="comment">// 数据劫持</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据了&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新了&#x27;</span>)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    span.innerHTML = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输入监听</span></span><br><span class="line">input.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>完整实现可前往之前写的：这应该是最详细的响应式系统讲解了</p>
<p><a href="https://link.zhihu.com/?target=https://juejin.im/post/5d26e368e51d4577407b1dd7">https://juejin.im/post/5d26e368e51d4577407b1dd7</a></p>
<h2 id="14、实现一个简单路由"><a href="#14、实现一个简单路由" class="headerlink" title="14、实现一个简单路由"></a><strong>14、实现一个简单路由</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hash路由</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 路由存储对象</span></span><br><span class="line">    <span class="built_in">this</span>.routes = &#123;&#125;</span><br><span class="line">    <span class="comment">// 当前hash</span></span><br><span class="line">    <span class="built_in">this</span>.currentHash = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 绑定this，避免监听时this指向改变</span></span><br><span class="line">    <span class="built_in">this</span>.freshRoute = <span class="built_in">this</span>.freshRoute.bind(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储</span></span><br><span class="line">  storeRoute (path, cb) &#123;</span><br><span class="line">    <span class="built_in">this</span>.routes[path] = cb || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  freshRoute () &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentHash = location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.routes[<span class="built_in">this</span>.currentHash]()</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15、实现懒加载"><a href="#15、实现懒加载" class="headerlink" title="15、实现懒加载"></a><strong>15、实现懒加载</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/5.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/6.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/7.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/8.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/9.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/10.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="keyword">let</span> imgs =  <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">// 可视区高度</span></span><br><span class="line"><span class="keyword">let</span> clientHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 滚动卷去的高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i ++) &#123;</span><br><span class="line">    <span class="comment">// 图片在可视区冒出的高度</span></span><br><span class="line">    <span class="keyword">let</span> x = clientHeight + scrollTop - imgs[i].offsetTop</span><br><span class="line">    <span class="comment">// 图片在可视区内</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; clientHeight+imgs[i].height) &#123;</span><br><span class="line">      imgs[i].src = imgs[i].getAttribute(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// addEventListener(&#x27;scroll&#x27;, lazyLoad) or setInterval(lazyLoad, 1000)</span></span><br></pre></td></tr></table></figure>

<h2 id="16、rem实现原理"><a href="#16、rem实现原理" class="headerlink" title="16、rem实现原理"></a><strong>16、rem实现原理</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始配置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> doc = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">let</span> width = doc.getBoundingClientRect().width</span><br><span class="line">  <span class="keyword">let</span> rem = width / <span class="number">75</span></span><br><span class="line">  doc.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听窗口变化</span></span><br><span class="line">addEventListener(<span class="string">&quot;resize&quot;</span>, setRem)</span><br></pre></td></tr></table></figure>

<h2 id="17、手写实现AJAX"><a href="#17、手写实现AJAX" class="headerlink" title="17、手写实现AJAX"></a><strong>17、手写实现AJAX</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 简单流程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(data)</span><br><span class="line"><span class="comment">// 设置状态变化回调处理请求结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyStatus === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 基于promise实现 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="keyword">const</span> url = options.url</span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="keyword">const</span> method = options.method.toLocaleLowerCase() || <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  <span class="comment">// 默认为异步true</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">async</span> = options.async</span><br><span class="line">  <span class="comment">// 请求参数</span></span><br><span class="line">  <span class="keyword">const</span> data = options.data</span><br><span class="line">  <span class="comment">// 实例化</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 请求超时</span></span><br><span class="line">  <span class="keyword">if</span> (options.timeout &amp;&amp; options.timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    xhr.timeout = options.timeout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个Promise实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    xhr.ontimeout = <span class="function">() =&gt;</span> reject &amp;&amp; reject(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">    <span class="comment">// 监听状态变化回调</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 200-300 之间表示请求成功，304资源未变，取缓存</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">          resolve &amp;&amp; resolve(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject &amp;&amp; reject()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误回调</span></span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">err</span> =&gt;</span> reject &amp;&amp; reject(err)</span><br><span class="line">    <span class="keyword">let</span> paramArr = []</span><br><span class="line">    <span class="keyword">let</span> encodeData</span><br><span class="line">    <span class="comment">// 处理请求参数</span></span><br><span class="line">    <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="comment">// 参数拼接需要通过 encodeURIComponent 进行编码</span></span><br><span class="line">        paramArr.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]))</span><br><span class="line">      &#125;</span><br><span class="line">      encodeData = paramArr.join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get请求拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测url中是否已存在 ? 及其位置</span></span><br><span class="line">      <span class="keyword">const</span> index = url.indexOf(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (index === -<span class="number">1</span>) url += <span class="string">&#x27;?&#x27;</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (index !== url.length -<span class="number">1</span>) url += <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      <span class="comment">// 拼接url</span></span><br><span class="line">      url += encodeData</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;get&#x27;</span>) xhr.send(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// post 方式需要设置请求头</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>)</span><br><span class="line">      xhr.send(encodeData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18、实现拖拽"><a href="#18、实现拖拽" class="headerlink" title="18、实现拖拽"></a><strong>18、实现拖拽</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// drag处于绝对定位状态</span></span><br><span class="line">  <span class="keyword">let</span> drag = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">  drag.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span><br><span class="line">    <span class="comment">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span></span><br><span class="line">    <span class="keyword">let</span> diffX = e.clientX - drag.offsetLeft</span><br><span class="line">    <span class="keyword">let</span> diffY = e.clientY - drag.offsetTop</span><br><span class="line">    drag.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span></span><br><span class="line">      <span class="keyword">let</span> left = e.clientX - diffX</span><br><span class="line">      <span class="keyword">let</span> top = e.clientY - diffY</span><br><span class="line">      <span class="comment">// 避免拖拽出可视区</span></span><br><span class="line">      <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - drag.offsetWidth) &#123;</span><br><span class="line">        left = <span class="built_in">window</span>.innerWidth - drag.offsetWidth</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        top = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - drag.offsetHeight) &#123;</span><br><span class="line">        top = <span class="built_in">window</span>.innerHeight - drag.offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">      drag.style.left = left + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      drag.style.top = top + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    drag.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.onmousemove = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">this</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="19、实现一个节流函数"><a href="#19、实现一个节流函数" class="headerlink" title="19、实现一个节流函数"></a><strong>19、实现一个节流函数</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路：在规定时间内只触发一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存时间</span></span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;节流&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(fn, <span class="number">1000</span>)) </span><br></pre></td></tr></table></figure>

<h2 id="20、实现一个防抖函数"><a href="#20、实现一个防抖函数" class="headerlink" title="20、实现一个防抖函数"></a><strong>20、实现一个防抖函数</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路:在规定时间内未触发第二次，则执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存定时器</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="comment">// 在规定时间内再次触发会先清除定时器后再重设定时器</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;防抖&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(fn, <span class="number">1000</span>)) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>原作者姓名： 陈煜仑<br>原出处：掘金<br>原文链接：<a href="https://link.zhihu.com/?target=https://juejin.im/post/6844903891591495693">20道JS原理题助你面试一臂之力！</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>首次发布</title>
    <url>/2020/11/21/%E9%A6%96%E6%AC%A1%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<h2 id="关于学习前端的一些思考"><a href="#关于学习前端的一些思考" class="headerlink" title="关于学习前端的一些思考"></a>关于学习前端的一些思考</h2><h3 id="万事开头难"><a href="#万事开头难" class="headerlink" title="万事开头难"></a>万事开头难</h3><p>当我想认真的写一些文章或者一些随笔来记录的我前端学习以及知识点的时候，突然深刻的体会到了这句话确实太有道理了。</p>
<p>最近一直在努力的学习前端，原因如下：人才稀缺，简单易学，待遇丰富，整体势头发展迅猛等等。但是也有一些不好的传闻比如：</p>
<blockquote>
<p>现在，几乎整个互联网行业都缺前端工程师，不仅在刚起步的创业公司，对上市公司乃至巨头这个问题也一直存在。没错，优秀的前端工程师简直比大熊猫还稀少。不仅在国内的互联网行业，在国外，前端工程师一样是需求旺盛、供不应求的香饽饽。</p>
</blockquote>
<h3 id="前端真不简单"><a href="#前端真不简单" class="headerlink" title="前端真不简单"></a>前端真不简单</h3><p>前端真是不简单的。大致一想前端没多少东西，想要找个工作，只需要h5，css3，javascript，vue一些框架。但是，仔细一想呢，零碎的东西有好多。并且在技术实现的时候，有的时候同一个技术实现，有好多种方法，但是最优解是哪一个，确实最为困难的。</p>
<h3 id="潦草收场"><a href="#潦草收场" class="headerlink" title="潦草收场"></a>潦草收场</h3><p>本来在新的博客搭建好之后这是发第一篇博文，满怀期待的想写一些东西。但是缺乏文采，不知道说些什么，以后会写一些专业的东西给大家，供大家一起交流学习。</p>
]]></content>
  </entry>
</search>
